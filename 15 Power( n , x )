class Solution {
    public double myPow(double x, int n) {
        long N = n;          // convert to long to handle negative overflow
        if (N < 0) {
            x = 1 / x;       // invert x for negative exponent
            N = -N;          // make exponent positive
        }

        double ans = 1;
        while(N > 0){
            if(N % 2 == 1){
                ans = ans * x;  // multiply ans for odd exponent
                N = N - 1;
            }
            else{
                x = x * x;      // square x
                N = N / 2;
            }
        }

        return ans;
    }

    public static void main(String[] args) {
        Solution s = new Solution();

        System.out.println(s.myPow(2.0, 10));   // Output: 1024.0
        System.out.println(s.myPow(2.1, 3));    // Output: 9.261
        System.out.println(s.myPow(2.0, -2));   // Output: 0.25
    }
}

/*
Time Complexity: O(log |n|) — each step reduces N by half
Space Complexity: O(1) — only uses constant variables
Outputs:
myPow(2.0, 10)  -> 1024.0
myPow(2.1, 3)   -> 9.261
myPow(2.0, -2)  -> 0.25
*/
