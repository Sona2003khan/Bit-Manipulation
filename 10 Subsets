import java.util.*;

public class Solution {

    public List<List<Integer>> subsets(int[] nums) {
        int n = nums.length;
        int totalSubset = 1 << n; // 2^n subsets
        List<List<Integer>> result = new ArrayList<>();

        for (int i = 0; i < totalSubset; i++) {
            List<Integer> list2 = new ArrayList<>();

            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) { // check if j-th bit is set
                    list2.add(nums[j]);    // add nums[j], not nums[i]
                }
            }
            result.add(list2);
        }
        return result;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] nums = {1, 2, 3};
        List<List<Integer>> subsets = sol.subsets(nums);

        System.out.println("Power set:");
        for (List<Integer> subset : subsets) {
            System.out.println(subset);
        }
    }
}

/*
⏱️ Time Complexity: O(n * 2^n)
   - There are 2^n subsets, and each subset can take O(n) time to construct
💾 Space Complexity: O(n * 2^n)
   - Storing all subsets in the result list
🧮 Output:
[]
[1]
[2]
[1, 2]
[3]
[1, 3]
[2, 3]
[1, 2, 3]
*/
