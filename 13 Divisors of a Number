import java.util.ArrayList;
import java.util.List;

public class Bit_manipulation_all_divisors_13 {

    // Function to find all divisors of a number
    public static List<Integer> Divisors_of_no(int n){

        List<Integer> list = new ArrayList<>();

        // Loop from 1 to √n
        for(int i = 1; i * i <= n; i++){
            if(n % i == 0){
                list.add(i);            // Add divisor i
                if(n / i != i){         // Add paired divisor n/i (avoid duplicate for perfect squares)
                    list.add(n / i);
                }
            }
        }
        return list;
    }

    public static void main(String[] args) {
        int n = 36;

        // Call function and print divisors
        List<Integer> divisors = Divisors_of_no(n);
        System.out.println(divisors);

        /*
         Output:
         [1, 36, 2, 18, 3, 12, 4, 9, 6]

         Time Complexity:
         O(√n)
         - Loop runs from 1 to √n.
         - Each iteration does constant-time operations (% and / and add).

         Space Complexity:
         O(√n)
         - Stores all divisors in a list.
         - Maximum number of divisors ≤ 2 * √n (from paired divisors).
        */
    }
}
